# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Dart

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    strategy:
      matrix:
        os: [ macos, ubuntu, windows ]
    runs-on: ${{ matrix.os }}-latest

    steps:
      - uses: actions/checkout@v3

      # Note: This workflow uses the latest stable version of the Dart SDK.
      # You can specify other versions if desired, see documentation here:
      # https://github.com/dart-lang/setup-dart/blob/main/README.md
      # - uses: dart-lang/setup-dart@v1
      - uses: dart-lang/setup-dart@9a04e6d73cca37bd455e0608d7e5092f881fd603

      - name: Install dependencies
        run: dart pub get

      # Uncomment this step to verify the use of 'dart format' on each commit.
      # - name: Verify formatting
      #   run: dart format --output=none --set-exit-if-changed .

      # Consider passing '--fatal-infos' for slightly stricter analysis.
      - name: Analyze project source
        run: dart analyze

      # Your project will need to have tests in test/ and a dependency on
      # package:test for this step to succeed. Note that Flutter projects will
      # want to change this to 'flutter test'.
      - name: Run tests
        run: dart test

      - name: compile
        shell: bash
        run: |
          export NAME=ldclblx_${{ github.ref_name }}_${{ matrix.os }}
          mkdir $NAME
          dart compile exe bin/ldclblx.dart -o $NAME/ldclblx
          cp README.md $NAME
      
      - name: zip bash
        if: matrix.os != 'windows-latest'
        run: |
          export NAME=ldclblx_${{ github.ref_name }}_${{ matrix.os }}
          zip -r $NAME.zip $NAME

      - name: zip powershell
        if: matrix.os == 'windows-latest'
        run: Compress-Archive -Path ldclblx_${{ github.ref_name }}_windows/* -Destination ldclblx_${{ github.ref_name }}_windows.zip

      - name: create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }} ${{ matrix.os }}
          draft: false
          prerelease: false


      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./ldclblx_${{ github.ref_name }}_${{ matrix.os }}.zip
          asset_name: ldclblx_${{ github.ref_name }}_${{ matrix.os }}.zip
          asset_content_type: application/zip